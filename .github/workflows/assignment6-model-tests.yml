name: Assignment 6 Model Tests

on:
  push:
    branches: [ main, Assignment6 ]
    paths:
      - '**'
  pull_request:
    branches: [ main ]
    paths:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create directories
      run: |
        mkdir -p models
        mkdir -p outputs
        chmod -R 777 outputs  # Ensure write permissions
        echo "Created models and outputs directories"

    - name: Generate augmentation samples
      run: |
        echo "Generating augmentation samples..."
        python -c "
        from augmentation import DataAugmentation
        augmentation = DataAugmentation()
        augmentation.visualize_augmentations(num_samples=10, save_path='outputs/augmentation_samples.png')
        "
        echo "Augmentation samples saved to outputs/augmentation_samples.png"


    - name: Train model
      run: |
        echo "Starting model training..."
        python train_model.py
        echo "Training completed."

    - name: Run model architecture tests
      run: |
        python -c "
        import torch
        from model import Net
        from normalization import NormalizationTypes

        def test_model():
            # Initialize model
            model = Net()
            
            # Test 1: Parameter Count
            total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
            assert total_params < 20000, f'Model has {total_params} parameters, should be less than 20,000'
            print(f'✓ Parameter count test passed. Total parameters: {total_params}')
            
            # Test 2: Batch Normalization
            has_batch_norm = any(isinstance(m, torch.nn.BatchNorm2d) for m in model.modules())
            assert has_batch_norm, 'Model should use Batch Normalization'
            print('✓ Batch Normalization test passed')
            
            # Test 3: Dropout
            has_dropout = any(isinstance(m, torch.nn.Dropout) for m in model.modules())
            assert has_dropout, 'Model should use Dropout'
            print('✓ Dropout test passed')
            
            # Test 4: GAP or FC (not both)
            has_gap = any(isinstance(m, torch.nn.AdaptiveAvgPool2d) for m in model.modules())
            num_fc = sum(1 for m in model.modules() if isinstance(m, torch.nn.Linear))
            
            # Check that model uses either GAP or FC, but not both
            assert (has_gap != (num_fc > 0)), 'Model should use either Global Average Pooling OR a Linear layer for classification, but not both'
            print('✓ Architecture test passed (Using ' + ('GAP' if has_gap else 'FC layer') + ' for classification)')
            
            # Test 5: Forward Pass Shape
            batch_size = 4
            x = torch.randn(batch_size, 1, 28, 28)
            output = model(x)
            assert output.shape == (batch_size, 10), f'Expected output shape (4, 10), got {output.shape}'
            print('✓ Output shape test passed')
            
            print('\nAll architecture tests passed successfully! ✨')

        test_model()
        "

    - name: Run model performance tests
      run: |
        python -c "
        import torch
        from torch import nn
        import torchvision
        from torch.utils.data import DataLoader
        from model import Net
        from test_model import test

        def test_performance():
            print('Testing Model Performance:')
            print('-------------------------')
            print('Test Dataset: MNIST')
            print('Total Test Samples: 10,000')
            print('Batch Size: 1,000')
            print('Number of Batches per Epoch: 10')
            print('Number of Test Epochs: 15')
            print('Expected Accuracy: >99.4%')
            print('-------------------------')

            # Load and test model
            model_path = 'models/best_train_model.pth'
            accuracy = test(model_path)
            
            # Verify test configuration
            test_loader = torch.utils.data.DataLoader(
                torchvision.datasets.MNIST('data', train=False, download=True),
                batch_size=1000, shuffle=True
            )
            
            assert len(test_loader) == 10, f'Expected 10 batches, got {len(test_loader)}'
            total_samples = len(test_loader.dataset)
            assert total_samples == 10000, f'Expected 10000 samples, got {total_samples}'
            
            # Check if accuracy meets requirement
            assert accuracy > 99.4, f'Model accuracy {accuracy:.2f}% is below required 99.4%'
            print(f'✓ Test configuration verified')
            print(f'✓ Accuracy test passed. Achieved accuracy: {accuracy:.2f}%')
            print('\nAll performance tests passed successfully! ✨')

        test_performance()
        "
